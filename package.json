{
  "name": "code-context-engine",
  "displayName": "Code Context Engine",
  "description": "AI-powered code context and search extension for VS Code",
  "version": "0.0.1",
  "publisher": "icelabz",
  "engines": {
    "vscode": "^1.74.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bramburn/bigcontext.git"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onCommand:code-context-engine.openMainPanel"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "code-context-engine.openMainPanel",
        "title": "Open Main Panel",
        "category": "Code Context"
      },
      {
        "command": "code-context-engine.startIndexing",
        "title": "Start Indexing",
        "category": "Code Context"
      },
      {
        "command": "code-context-engine.setupProject",
        "title": "Setup Project",
        "category": "Code Context"
      },
      {
        "command": "code-context-engine.openSettings",
        "title": "Open Settings",
        "category": "Code Context"
      },
      {
        "command": "code-context-engine.openDiagnostics",
        "title": "Open Diagnostics",
        "category": "Code Context"
      },
      {
        "command": "codeContextEngine.healthCheck",
        "title": "Health Check",
        "category": "Code Context"
      }
    ],
    "configuration": {
      "title": "Code Context Engine",
      "properties": {
        "code-context-engine.embeddingProvider": {
          "type": "string",
          "default": "ollama",
          "enum": [
            "ollama",
            "openai"
          ],
          "description": "Embedding provider to use for vectorization",
          "enumDescriptions": [
            "Local Ollama embedding service (free, private)",
            "OpenAI embedding service (requires API key)"
          ]
        },
        "code-context-engine.databaseConnectionString": {
          "type": "string",
          "default": "http://localhost:6333",
          "description": "Qdrant vector database connection string",
          "pattern": "^https?://.*:\\d+$",
          "patternErrorMessage": "Must be a valid HTTP/HTTPS URL with port (e.g., http://localhost:6333)"
        },
        "code-context-engine.openaiApiKey": {
          "type": "string",
          "default": "",
          "description": "OpenAI API key for embedding generation (stored securely in VS Code settings)"
        },
        "code-context-engine.ollamaModel": {
          "type": "string",
          "default": "nomic-embed-text",
          "description": "Ollama model to use for embeddings",
          "enum": [
            "nomic-embed-text",
            "all-minilm",
            "mxbai-embed-large"
          ],
          "enumDescriptions": [
            "Nomic Embed Text (768 dimensions, recommended)",
            "All-MiniLM (384 dimensions, faster)",
            "MxBai Embed Large (1024 dimensions, more accurate)"
          ]
        },
        "code-context-engine.ollamaApiUrl": {
          "type": "string",
          "default": "http://localhost:11434",
          "description": "Ollama API URL",
          "pattern": "^https?://.*:\\d+$",
          "patternErrorMessage": "Must be a valid HTTP/HTTPS URL with port (e.g., http://localhost:11434)"
        },
        "code-context-engine.ollamaMaxBatchSize": {
          "type": "number",
          "default": 10,
          "minimum": 1,
          "maximum": 100,
          "description": "Maximum batch size for Ollama embeddings"
        },
        "code-context-engine.ollamaTimeout": {
          "type": "number",
          "default": 30000,
          "minimum": 5000,
          "maximum": 120000,
          "description": "Timeout for Ollama API requests in milliseconds"
        },
        "code-context-engine.openaiModel": {
          "type": "string",
          "default": "text-embedding-ada-002",
          "description": "OpenAI model to use for embeddings",
          "enum": [
            "text-embedding-ada-002",
            "text-embedding-3-small",
            "text-embedding-3-large"
          ],
          "enumDescriptions": [
            "Ada-002 (1536 dimensions, cost-effective)",
            "Embedding-3-Small (1536 dimensions, improved performance)",
            "Embedding-3-Large (3072 dimensions, highest quality)"
          ]
        },
        "code-context-engine.openaiMaxBatchSize": {
          "type": "number",
          "default": 100,
          "minimum": 1,
          "maximum": 1000,
          "description": "Maximum batch size for OpenAI embeddings"
        },
        "code-context-engine.openaiTimeout": {
          "type": "number",
          "default": 60000,
          "minimum": 5000,
          "maximum": 300000,
          "description": "Timeout for OpenAI API requests in milliseconds"
        },
        "code-context-engine.maxSearchResults": {
          "type": "number",
          "default": 20,
          "minimum": 1,
          "maximum": 100,
          "description": "Maximum number of search results to return"
        },
        "code-context-engine.minSimilarityThreshold": {
          "type": "number",
          "default": 0.5,
          "minimum": 0,
          "maximum": 1,
          "description": "Minimum similarity threshold for search results (0.0 to 1.0)"
        },
        "code-context-engine.autoIndexOnStartup": {
          "type": "boolean",
          "default": false,
          "description": "Automatically start indexing when workspace is opened"
        },
        "code-context-engine.indexingBatchSize": {
          "type": "number",
          "default": 100,
          "minimum": 10,
          "maximum": 1000,
          "description": "Number of code chunks to process in each batch during indexing"
        },
        "code-context-engine.enableDebugLogging": {
          "type": "boolean",
          "default": false,
          "description": "Enable detailed debug logging for troubleshooting"
        },
        "code-context-engine.excludePatterns": {
          "type": "array",
          "default": [
            "**/node_modules/**",
            "**/dist/**",
            "**/build/**",
            "**/.git/**",
            "**/coverage/**"
          ],
          "items": {
            "type": "string"
          },
          "description": "File patterns to exclude from indexing (in addition to .gitignore)"
        },
        "code-context-engine.supportedLanguages": {
          "type": "array",
          "default": [
            "typescript",
            "javascript",
            "python",
            "csharp"
          ],
          "items": {
            "type": "string",
            "enum": [
              "typescript",
              "javascript",
              "python",
              "csharp"
            ]
          },
          "description": "Programming languages to include in indexing"
        },
        "code-context-engine.maxFileSize": {
          "type": "number",
          "default": 1048576,
          "minimum": 1024,
          "maximum": 10485760,
          "description": "Maximum file size in bytes to process during indexing (1MB default)"
        },
        "code-context-engine.indexingChunkSize": {
          "type": "number",
          "default": 1000,
          "minimum": 100,
          "maximum": 5000,
          "description": "Size of text chunks for embedding (in characters)"
        },
        "code-context-engine.indexingChunkOverlap": {
          "type": "number",
          "default": 200,
          "minimum": 0,
          "maximum": 1000,
          "description": "Overlap between consecutive chunks (in characters)"
        },
        "code-context-engine.indexingIntensity": {
          "type": "string",
          "enum": [
            "High",
            "Medium",
            "Low"
          ],
          "default": "High",
          "description": "Controls the CPU intensity of the indexing process. 'Low' is recommended for battery-powered devices.",
          "enumDescriptions": [
            "Maximum speed indexing with no artificial delays",
            "Moderate speed with small delays between files (100ms)",
            "Slow speed with significant delays between files (500ms) - battery friendly"
          ]
        },
        "code-context-engine.queryExpansion.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable AI-powered query expansion to find more relevant results by generating related terms and synonyms"
        },
        "code-context-engine.queryExpansion.maxExpandedTerms": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 10,
          "description": "Maximum number of expanded terms to generate for each query"
        },
        "code-context-engine.queryExpansion.confidenceThreshold": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 1,
          "description": "Minimum confidence threshold for including expanded terms (0.0 to 1.0)"
        },
        "code-context-engine.queryExpansion.llmProvider": {
          "type": "string",
          "enum": [
            "openai",
            "ollama"
          ],
          "default": "ollama",
          "description": "LLM provider to use for query expansion",
          "enumDescriptions": [
            "OpenAI GPT models (requires API key)",
            "Local Ollama models (free, private)"
          ]
        },
        "code-context-engine.queryExpansion.model": {
          "type": "string",
          "default": "gpt-3.5-turbo",
          "description": "Model to use for query expansion (e.g., 'gpt-3.5-turbo' for OpenAI, 'llama2' for Ollama)"
        },
        "code-context-engine.queryExpansion.timeout": {
          "type": "number",
          "default": 5000,
          "minimum": 1000,
          "maximum": 30000,
          "description": "Timeout for query expansion requests in milliseconds"
        },
        "code-context-engine.llmReRanking.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable LLM-powered re-ranking of search results for improved relevance"
        },
        "code-context-engine.llmReRanking.maxResultsToReRank": {
          "type": "number",
          "default": 10,
          "minimum": 5,
          "maximum": 50,
          "description": "Maximum number of search results to re-rank using LLM"
        },
        "code-context-engine.llmReRanking.vectorScoreWeight": {
          "type": "number",
          "default": 0.3,
          "minimum": 0,
          "maximum": 1,
          "description": "Weight for original vector similarity score in final ranking (0.0 to 1.0)"
        },
        "code-context-engine.llmReRanking.llmScoreWeight": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 1,
          "description": "Weight for LLM relevance score in final ranking (0.0 to 1.0)"
        },
        "code-context-engine.llmReRanking.llmProvider": {
          "type": "string",
          "enum": [
            "openai",
            "ollama"
          ],
          "default": "ollama",
          "description": "LLM provider to use for re-ranking",
          "enumDescriptions": [
            "OpenAI GPT models (requires API key)",
            "Local Ollama models (free, private)"
          ]
        },
        "code-context-engine.llmReRanking.model": {
          "type": "string",
          "default": "gpt-3.5-turbo",
          "description": "Model to use for re-ranking (e.g., 'gpt-3.5-turbo' for OpenAI, 'llama2' for Ollama)"
        },
        "code-context-engine.llmReRanking.timeout": {
          "type": "number",
          "default": 10000,
          "minimum": 1000,
          "maximum": 60000,
          "description": "Timeout for re-ranking requests in milliseconds"
        },
        "code-context-engine.llmReRanking.includeExplanations": {
          "type": "boolean",
          "default": false,
          "description": "Include explanations for why results were ranked as they were (may increase response time)"
        },
        "code-context-engine.logging.level": {
          "type": "string",
          "enum": [
            "Error",
            "Warn",
            "Info",
            "Debug"
          ],
          "default": "Info",
          "description": "Controls the verbosity of logs shown in the 'Code Context Engine' output channel",
          "enumDescriptions": [
            "Only show error messages",
            "Show warnings and errors",
            "Show informational messages, warnings, and errors (recommended)",
            "Show all messages including debug information"
          ]
        },
        "code-context-engine.webview.basicTestMode": {
          "type": "boolean",
          "default": false,
          "description": "Serve a minimal test HTML for the webview to verify VS Code API initialization and messaging. Enable for troubleshooting Remote SSH issues."
        },
        "code-context-engine.webview.healthMonitoring.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable health monitoring and alerting for webview connections."
        },
        "code-context-engine.webview.healthMonitoring.latencyThreshold": {
          "type": "number",
          "default": 1000,
          "description": "Latency threshold in milliseconds. Alerts will be triggered when latency exceeds this value."
        },
        "code-context-engine.webview.healthMonitoring.errorThreshold": {
          "type": "number",
          "default": 5,
          "description": "Error count threshold. Alerts will be triggered when error count exceeds this value within a time window."
        },
        "code-context-engine.webview.healthMonitoring.reconnectThreshold": {
          "type": "number",
          "default": 3,
          "description": "Reconnection attempts threshold. Alerts will be triggered when reconnection attempts exceed this value."
        },
        "code-context-engine.webview.routeOverride": {
          "type": "string",
          "default": "",
          "description": "If set (e.g. '/test-basic'), the webview will client-navigate to this SvelteKit route on load to aid debugging."
        },
        "code-context-engine.webview.implementation": {
          "type": "string",
          "enum": ["sveltekit", "react", "svelte-simple"],
          "default": "sveltekit",
          "description": "Choose which webview implementation to use: SvelteKit (original), React (Fluent UI), or Simple Svelte (minimal)."
        }
      }
    },
    "keybindings": [
      {
        "command": "code-context-engine.openMainPanel",
        "key": "ctrl+alt+c",
        "mac": "cmd+alt+c",
        "when": "editorTextFocus"
      },
      {
        "command": "code-context-engine.startIndexing",
        "key": "ctrl+alt+i",
        "mac": "cmd+alt+i",
        "when": "editorTextFocus"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "code-context-engine-sidebar",
          "title": "Code Context Engine",
          "icon": "media/icon.svg"
        }
      ]
    },
    "views": {
      "code-context-engine-sidebar": [
        {
          "id": "code-context-engine-view",
          "name": "Code Context",
          "type": "webview",
          "contextualTitle": "Code Context Engine"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile && npm run build-webview",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "build-webview": "cd webview && npm run build",
    "build:all": "npm run compile && npm run build-webview",
    "package": "npm run build:all && npx @vscode/vsce package --no-dependencies",
    "publish": "npx @vscode/vsce publish --no-dependencies",
    "publish:vsce": "npx @vscode/vsce publish --pat $VSCE_PAT",
    "release": "node scripts/release.js",
    "clean": "rimraf out *.vsix",
    "dev": "npm run watch"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "16.x",
    "@types/vscode": "^1.74.0",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^8.28.0",
    "mocha": "^11.7.1",
    "rimraf": "^5.0.10",
    "shelljs": "^0.10.0",
    "typescript": "^4.9.4",
    "@vscode/vsce": "^3.0.0"
  },
  "dependencies": {
    "@qdrant/js-client-rest": "^1.7.0",
    "axios": "^1.6.0",
    "glob": "^8.0.3",
    "ignore": "^5.2.4",
    "tree-sitter": "^0.21.1",
    "tree-sitter-c-sharp": "^0.21.3",
    "tree-sitter-python": "^0.21.0",
    "tree-sitter-typescript": "^0.21.2",
    "vscode-languageclient": "^9.0.1",
    "vscode-languageserver": "^9.0.1",
    "xmlbuilder2": "^3.1.1"
  }
}
